#!/usr/bin/env python3
# -*-encoding: utf-8-*-
# author: Valentyn Kofanov

from AES.FF import FiniteField
from copy import deepcopy


class AES:
    """
    aes 128 implementation
    """

    sbox = [
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
    ]

    inv_sbox = [
        [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
        [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
        [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
        [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
        [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
        [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
        [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
        [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
        [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
        [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
        [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
        [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
        [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
        [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
        [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
        [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
    ]

    a_x = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ]

    inv_a_x = [
        [0x0e, 0x0b, 0x0d, 0x09],
        [0x09, 0x0e, 0x0b, 0x0d],
        [0x0d, 0x09, 0x0e, 0x0b],
        [0x0b, 0x0d, 0x09, 0x0e]
    ]

    r_con = [
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
        0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
        0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
        0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
        0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
        0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
        0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
        0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
        0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
        0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
        0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
        0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
        0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
        0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
        0xe8, 0xcb
    ]

    def __init__(self, key: iter) -> None:
        self._key = key
        self._state = [[0 for _ in range(4)] for _ in range(4)]
        self._round_keys = [[0 for _ in range(44)] for _ in range(4)]

    @staticmethod
    def _get_column(matrix, col_num):
        """
        returns needed column of matrix
        :param matrix: matrix
        :param col_num: column index
        :return: array - column
        """
        return [matrix[i][col_num] for i in range(len(matrix))]

    @staticmethod
    def _set_column(matrix, col_num, new_col):
        for i in range(len(matrix)):
            matrix[i][col_num] = new_col[i]

    @staticmethod
    def _dot_product(v1, v2):
        assert len(v1) == len(v2)
        s = FiniteField(0)
        for _ in range(len(v1)):
            s += FiniteField(v1[_]) * FiniteField(v2[_])
        return s.num

    @staticmethod
    def _vector_xor(v1, v2):
        assert len(v1) == len(v2)
        return [v1[i] ^ v2[i] for i in range(len(v1))]

    def _key_schedule(self, current_key):
        for i in range(4):
            for j in range(4):
                self._round_keys[i][j] = current_key[i][j]
            # AES._set_column(self._round_keys, i, AES._get_column(current_key, i))
        for i in range(10):
            t = AES._get_column(self._round_keys, 4 * i + 3)
            tmp = t[0]
            t = t[1:] + [tmp]

            for j in range(4):
                t[j] = AES.sbox[t[j] // 16][t[j] % 16]
            t[0] = t[0] ^ AES.r_con[i + 1]
            AES._set_column(self._round_keys, 4 * i + 4, AES._vector_xor(AES._get_column(self._round_keys, 4 * i), t))
            AES._set_column(self._round_keys, 4 * i + 5, AES._vector_xor(AES._get_column(self._round_keys, 4 * i + 1),
                                                                         AES._get_column(self._round_keys, 4 * i + 4)))
            AES._set_column(self._round_keys, 4 * i + 6, AES._vector_xor(AES._get_column(self._round_keys, 4 * i + 2),
                                                                         AES._get_column(self._round_keys, 4 * i + 5)))
            AES._set_column(self._round_keys, 4 * i + 7, AES._vector_xor(AES._get_column(self._round_keys, 4 * i + 3),
                                                                         AES._get_column(self._round_keys, 4 * i + 6)))

    def _add_round_key(self, current_key):
        for i in range(4):
            for j in range(4):
                self._state[i][j] = self._state[i][j] ^ current_key[i][j]

    def _sub_bytes(self):
        for i in range(4):
            for j in range(4):
                self._state[i][j] = AES.sbox[self._state[i][j] // 16][self._state[i][j] % 16]

    def _shift_rows(self):
        shifted = [[0 for _ in range(4)] for _ in range(4)]
        for i in range(4):
            for j in range(4):
                shifted[i][j] = self._state[i][(j - i + 4) % 4]
        return shifted

    def _mix_columns(self):
        for i in range(4):
            cur_col = AES._get_column(self._state, i)
            for j in range(4):
                self._state[j][i] = AES._dot_product(cur_col, AES.a_x[j])

    def _sub_key(self, key_num):
        res = [[0 for _ in range(4)] for _ in range(4)]
        for i in range(4):
            for j in range(4):
                res[i][j] = self._round_keys[i][4 * key_num + j]
        return res

    def _inv_shift_rows(self):
        shifted = [[0 for _ in range(4)] for _ in range(4)]
        for i in range(4):
            for j in range(4):
                shifted[i][j] = self._state[i][(i + j) % 4]
        return shifted

    def _inv_sub_bytes(self):
        for i in range(4):
            for j in range(4):
                self._state[i][j] = AES.inv_sbox[self._state[i][j] // 16][self._state[i][j] % 16]

    def _inv_mix_columns(self):
        for i in range(4):
            cur_col = AES._get_column(self._state, i)
            for j in range(4):
                self._state[j][i] = AES._dot_product(cur_col, AES.inv_a_x[j])

    def encrypt(self, pt: iter) -> iter:
        self._state = deepcopy(pt)

        self._key_schedule(self._key)
        self._add_round_key(self._key)
        for i in range(1, 10):
            self._sub_bytes()
            self._shift_rows()
            self._mix_columns()
            self._add_round_key(self._sub_key(i))
        self._sub_bytes()
        self._shift_rows()
        self._add_round_key(self._sub_key(10))
        return self._state

    def decrypt(self, ct: iter) -> iter:
        self._state = deepcopy(ct)
        self._key_schedule(self._key)
        self._add_round_key(self._sub_key(10))
        for i in range(9, 0, -1):
            self._inv_shift_rows()
            self._inv_sub_bytes()
            self._add_round_key(self._sub_key(i))
            self._inv_mix_columns()
        self._inv_shift_rows()
        self._inv_sub_bytes()
        self._add_round_key(self._sub_key(0))
        return self._state


if __name__ == '__main__':
    plain_text = [
        [0x36, 0x88, 0x31, 0xe0],
        [0x43, 0x5a, 0x31, 0x37],
        [0xf6, 0x30, 0x01, 0x07],
        [0xa8, 0x8f, 0xa2, 0x34]
    ]
    key = [
        [0x2b, 0x28, 0xab, 0x09],
        [0x7e, 0xae, 0xf7, 0xcf],
        [0x15, 0xd2, 0x15, 0x4f],
        [0x16, 0xa6, 0x88, 0x3c]
    ]
    aes = AES(key)
    encrypted = aes.encrypt(plain_text)
    decrypted = aes.decrypt(encrypted)
    print(f"--- plain ---")
    for row in plain_text:
        print(row)

    print(f"--- encrypted ---")
    for row in encrypted:
        print(row)

    print(f"--- decrypted ---")
    for row in decrypted:
        print(row)

    print(f"\npt = dec(enc(pt): {plain_text == decrypted}")

